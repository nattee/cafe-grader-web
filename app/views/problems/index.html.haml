%h1 Problems
.row
  .col-md-5
    = link_to 'Import problems', {:action => 'import'}, class: 'btn btn-success m-1'
    = link_to 'Bulk Manage', { action: 'manage'}, class: 'btn btn-info m-1'
    - if @current_user.admin?
      = link_to 'Turn off all problems', {:action => 'turn_all_off'}, class: 'btn btn-secondary m-1'
      = link_to 'Turn on all problems', {:action => 'turn_all_on'}, class: 'btn btn-secondary m-1'
  .col-md-7
    .card.bg-warning-subtle.shadow-sm.mb-3
      .card-body
        %h4 
          .mi.mi-bs.fill settings
          Configurations Status
        %ul.mb-0
          %li
            Since
            %span.font-monospace.rounded.bg-light.p-1 system.use_problem_group
            is
            %strong>= " #{GraderConfiguration.use_problem_group?}"
            =","
            - if GraderConfiguration.use_problem_group?
              normal users will only have access to
              %strong enabled
              problems within their assigned groups.
              To manage these groups, visit #{link_to 'Manage/Groups', groups_path}.
            - else
              Normal users will see
              %strong every
              problems that are
              %strong available.
        %h4
          .mi.mi-bs.fill help
          Usage
        %ul.mb-0
          %li
            %strong Available
            is a global setting per problem. Problems that have their available set to
            %strong false
            won't appear to any user, even if the problem is enabled in their group. 
            Only admin can change availability status, while group editor should use the
            %strong enabled
            option in group management to control visibility within groups.

%table#main_table.table.table-condense.table-hover{'data-controller': 'init-ui-component'}
  %thead
    %tr
      %th Name
      %th Full name
      %th Difficulty
      %th.text-end
        A - D(T)
        = render partial: 'tooltip', locals: {title: 'number of attachments, datasets, testcases of the problem'}
      %th.text-end Model Solution
      %th Tags
      %th
        Submit
        = render partial: 'tooltip', locals: {title: 'Admin can always submit to any problem'}
      %th Date added
      %th.text-center
        Avail?
        = render partial: 'tooltip', locals: {title: 'If "Avail?" is not set, the problem will remain hidden from all contestants, even if enabled in groups or contests.'}
      %th.text-center
        View Testcase?
        = render partial: 'tooltip', locals: {title: 'Let user view the testcase of this problem?'}
      %th.text-center
      %th.text-center
      %th.text-center
  %tbody
    - for problem in @problems
      %tr{:class => "#{(problem.available) ? "table-success" : ""}", :id => "prob-#{problem.id}", :name => "prob-#{problem.id}"}
        - @problem=problem
        %td= problem.name
        %td
          = problem.full_name
          = link_to_description_if_any "[Read <span class='mi mi-bs md-18'>description</span>]".html_safe, problem
          = link_to "[Files <span class='mi mi-bs md-18'>archive</span>]".html_safe, download_by_type_problem_path(problem,'attachment') if problem.attachment.attached?
        %td= render_star(problem.difficulty)
        %td.text-end
          = problem.live_dataset.checker.attached? ? mdi(:checkbook) : ''
          = "#{problem.attachment.attached? ? 1 : 0} - #{problem.dataset_count}(#{problem.tc_count})"
        %td.text-end= "#{problem.ms_count}"
        %td
          - problem.tags.each do |t|
            %span.badge.text-bg-secondary.bg-opacity-100= t.name
        %td.py-1.align-middle= link_to "Submit", direct_edit_problem_submissions_path(problem,@current_user.id), class: 'btn btn-sm btn-primary'
        %td= problem.date_added
        %td
          .form-check.form-switch
            %input.form-check-input{id: "prob-#{problem.id}-available-switch", checked: problem.available, type: "checkbox", data: {action: 'problem#toggle', 'row-id': problem.id, field: 'available', readonly: @current_user.admin? ? 'false' : 'true'}, disabled: @current_user.admin? == false}
        %td 
          -#= toggle_button(@problem.view_testcase?, toggle_view_testcase_problem_path(@problem), "problem-view-testcase-#{@problem.id}")
          .form-check.form-switch
            %input.form-check-input{id: "prob-#{problem.id}-view-testcase-switch", checked: problem.view_testcase, type: "checkbox", data: {action: 'problem#toggle', 'row-id': problem.id, field: 'view_testcase'}}
        %td= link_to "#{mdi(:finance)}Stat".html_safe, {:action => 'stat', :id => problem.id}
        %td= link_to 'Edit', {:action => 'edit', :id => problem}
        %td.py-1.align-middle= link_to 'Destroy', { :action => 'destroy', :id => problem }, 'data-confirm': 'Are you sure?', :method => :delete, class: 'btn btn-danger btn-sm btn-block py-1'

-# hidden form for problem toggle
= form_with url: toggle_view_testcase_problem_path(-123), html: {data: {turbo: true, 'problem-target': 'toggleViewTestcaseForm', action: 'turbo:submit-end->problem#resetToggleForm'}} do
  /
= form_with url: toggle_available_problem_path(-123), html: {data: {turbo: true, 'problem-target': 'toggleAvailableForm', action: 'turbo:submit-end->problem#resetToggleForm'}} do
  /

:javascript
  function init_table() {
    $("#main_table").DataTable({
      sorting: false,
      columnDefs: [
        { targets: [3,4,5,6,10,11,12], sortable: false },
      ],
      paging: false,
      responsive: true,
      dom: "<'row'<'#prob-group.col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
        "<'row'<'col-sm-12'tr>>" +
        "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
    })
  }

  // this function is called by the 
  function set_problem_switch(problem_id,available,view_testcase) {
    let avail_button = document.getElementById(`prob-${problem_id}-available-switch`)
    avail_button.checked = available
    avail_button.disabled = avail_button.dataset.readonly == 'true'

    row = document.getElementById(`prob-${problem_id}`)
    if (available) { row.classList.add('table-success')} else { row.classList.remove('table-success')}

    let view_testcase_button = document.getElementById(`prob-${problem_id}-view-testcase-switch`)
    view_testcase_button.checked = view_testcase
    view_testcase_button.disabled = false
  }

  window.addEventListener("load", function() {
    init_table();
  });

