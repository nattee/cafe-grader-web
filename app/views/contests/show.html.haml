%h2 Contest management
.mb-3
  [
  = link_to "#{mdi(:arrow_back)} Back".html_safe, contests_path, class: 'mx-1'
  |
  = link_to "#{mdi(:summarize)} Watch".html_safe, view_contest_path(@contest), class: 'mx-1'
  ]
.row.my-3.gx-3
  .col-md-6
    .card.shadow-sm.my-1
      .card-body
        %h4 
          Contest Detail
        .row.mb-3
          = key_pair(obj: @contest, field: :name)
          = key_pair(obj: @contest, field: :description,width: 4)
          = key_pair(obj: @contest, field: :enabled, as: :yes_no)
          = key_pair(label: 'Start Time', value: @contest&.start&.strftime("%Y-%b-%d %H:%M"))
          = key_pair(label: 'Finish Time', value: @contest&.stop&.strftime("%Y-%b-%d %H:%M"))
          = key_pair(obj: @contest, field: :finalized, as: :yes_no)
        = link_to 'Edit', edit_contest_path(@contest), class: 'btn btn-primary me-2'
  .col-md-6
    .card.bg-warning-subtle.shadow-sm.my-1
      .card-body
        %h4 Tips
        :markdown
          * The site must be in the **Contest Mode** for a contest to be displayed to users
          * A contest is shown to users only if it is enabled and the current time falls within its start and stop time range.
          * When a contest is **finalized**, users cannot submit to the contest and the contests can no longer be modified.
.row.my-3{data: {controller: 'contest'}}
  .col-12
    .card.shadow-sm
      .card-body
        %ul.nav.nav-tabs.mb-3
          %li.nav-item
            %button.nav-link.active{data: {bs: {toggle: 'tab',target: '#tab-contest-user'},
              action: 'shown.bs.tab->contest#tabChange', table: {id: 'problem_table',init: 'no'}}}
              %span.mi.mi-bs
                person
              Users
          %li.nav-item
            %button.nav-link{data: {bs: {toggle: 'tab',target: '#tab-contest-problem'}, 
              action: 'shown.bs.tab->contest#tabChange', table: {id: 'problem_table',init: 'no'}}}
              %span.mi.mi-bs
                task
              Problems
          %li.nav-item
            %button.nav-link{data: {bs: {toggle: 'tab',target: '#tab-add-users'},
              action: 'shown.bs.tab->contest#tabChange'}}
              %span.mi.mi-bs
                upload
              Import
        .tab-content
          -# ==========================================
          -# ---------- users pane ------------------
          -# ==========================================
          #tab-contest-user.tab-pane.fade.show.active
            .row
              .col-md-6
                %h5.mb-2.card-subtitle.text-body-secondary List of users in this contest
                .mb-2
                  Use following actions to add users to this contest.
                =form_tag add_user_contest_path(@contest), class: 'mb-1 form-inline', 
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterUsersAdd'} do
                  .row.mb-1
                    .col-md-3
                      =label_tag :user_ids, "Add these users", class: 'col-form-label'
                    .col-md-7
                      =select_tag :user_ids, options_from_collection_for_select(User.all,'id','login_with_name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-md-2
                      =submit_tag "Add", class: 'btn btn-primary my-1'
                =form_tag add_user_by_group_contest_path(@contest), class: 'mb-1 form-inline', 
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterUsersAdd'} do
                  .row.mb-1
                    .col-md-3
                      =label_tag :user_group_ids, "Add all from groups", class: 'col-form-label'
                    .col-md-7
                      =select_tag :user_group_ids, options_from_collection_for_select(Group.all,'id','name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-md-2
                      =submit_tag "Add", value: "Add", class: 'btn btn-primary my-1'
                -# hidden user action form
                = form_with url: do_user_contest_path, html: {'data-contest-target': 'userForm', id: 'do-user-form',
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterUserAction', 'turbo-confirm': 'placeholder'}} do |f|
                  = f.hidden_field :user_id, 'data-contest-target': 'userFormUserID'
                  = f.hidden_field :command, 'data-contest-target': 'userFormCommand'
                = form_with url: extra_time_user_contest_path, html: {'data-contest-target': 'userExtraTimeForm', id: 'extra-time-user-form',
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterUserAction'}} do |f|
                  = f.hidden_field :row_id, 'data-contest-target': 'userExtraTimeFormRowID'
                  = f.hidden_field :start_offset, 'data-contest-target': 'userExtraTimeFormStart'
                  = f.hidden_field :end_offset, 'data-contest-target': 'userExtraTimeFormEnd'
                -# actions affecting all users buttons
                .row.mb-2
                  .col-md-3
                  .col-md-9
                    = button_to 'Enable All', do_all_users_contest_path(@contest), class: 'btn btn-primary m-1', value: 'enable', name: 'command',
                      form: {style: 'display: inline',data: {turbo: true, action: 'turbo:submit-end->contest#afterUserAction'}}
                    = button_to 'Disable All', do_all_users_contest_path(@contest), class: 'btn btn-primary m-1', value: 'disable', name: 'command',
                      form: {style: 'display: inline',data: {turbo: true, action: 'turbo:submit-end->contest#afterUserAction'}}
                    = button_to 'Remove All', do_all_users_contest_path(@contest), class: 'btn btn-danger m-1', value: 'remove', name: 'command',
                      form: {style: 'display: inline',data: {turbo: true, action: 'turbo:submit-end->contest#afterUserAction',
                      'turbo-confirm': 'Really remove all users from the contest?'}}
              .col-md-6
                -# help for GroupUser
                .card.bg-warning-subtle.shadow-sm
                  .card-body
                    :markdown
                      * If you want to add several users to a contest, use the #{mdi("upload")} Import tab.
                      * Only enabled users may access the contest.
            %table#user_table.table.datatable.table-hover
              %thead
                %tr
                  %th Login
                  %th Full name
                  %th Role (hidden)
                  %th Seat
                  %th Remark
                  %th Extra Time (s)
                  %th Enable
                  %th Remove
                  %th Set Role
          -# ==========================================
          -# ---------- problem pane ------------------
          -# ==========================================
          #tab-contest-problem.tab-pane.fade
            .row
              .col-md-6
                %h5.mb-2.card-subtitle.text-body-secondary List of problems in this contest
                .mb-2
                  Use following actions to add problems to this contest.
                =form_tag add_problem_contest_path(@contest), class: 'mb-1 form-inline',
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterProblemsAdd' } do
                  .row.mb-1
                    .col-md-3
                      =label_tag :problem_ids, "Problem",class: 'col-form-label'
                    .col-md-7
                      =select_tag :problem_ids, options_from_collection_for_select(Problem.all,'id','long_name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-auto
                      =submit_tag "Add",class: 'btn btn-primary my-1', 'data-group-target': 'asdf'
                =form_tag add_problem_by_group_contest_path(@contest), class: 'mb-1 form-inline',
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterProblemsAdd'} do
                  .row.mb-1
                    .col-md-3
                      =label_tag :problem_group_ids, "Add all from groups", class: 'col-form-label'
                    .col-md-7
                      =select_tag :problem_group_ids, options_from_collection_for_select(Group.all,'id','name'), class: 'select2', multiple: true, style: 'width: 100%';
                    .col-md-2
                      =submit_tag "Add", value: "Add", class: 'btn btn-primary my-1'
                -# hidden problem action form
                = form_with url: do_problem_contest_path, html: {'data-contest-target': 'problemForm',
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterProblemAction'}} do |f|
                  = f.hidden_field :problem_id, 'data-contest-target': 'problemFormProblemID'
                  = f.hidden_field :command, 'data-contest-target': 'problemFormCommand'
              .col-md-6
                -# help for group problem
                .card.bg-warning-subtle.shadow-sm
                  .card-body
                    %ul
                      %li
                        If you want to add several problem to a contest, it may be easier to bulk manage them in the
                        = link_to 'Bulk Manage Problems', manage_problems_path
                        page.
                      %li
                        A problem is available to a user only if it is globally available and enabled in the contest.
            .row
              .col-12
                %table#problem_table.table.datatable.table-hover
                  %thead
                    %tr
                      %th Number
                      %th Name
                      %th Full name
                      %th.text-center Global Available
                      %th Enable
                      %th Action
          -# ==========================================
          -# ---------- import users ------------------
          -# ==========================================
          #tab-add-users.tab-pane.fade
            .row
              .col-md-6
                %h5.mb-2.card-subtitle.text-body-secondary Add users to the contest
                = form_with url: add_users_from_csv_contest_path(@contest), 
                  data: {turbo: true, action: 'turbo:submit-end->contest#afterUsersAdd'} do |f|
                  .row.align-items-center.mb-3
                    .col-auto
                      = f.submit 'Add following users',class: 'btn btn-primary'
                  .row.mb-3
                    .col-12
                      = f.text_area :user_list, value: nil, class: 'form-control', style: 'height: 30rem'
              .col-md-6
                .card.bg-warning-subtle.shadow-sm
                  .card-body
                    .card-title
                    Add users to the contest from a csv text. One user per line.
                    %ul
                      %li
                        Each line must be in the following format. A square bracket indicates that the parameter is optional.
                        %span.rounded.bg-light.p-1.font-monospace user_id[,seat[,remark]]]
                      %li
                        If the users with the same user_id already exists, existing information will be overwritten.
                      %li
                        The columns
                        %span.rounded.bg-light.p-1.font-monospace seat
                        and
                        %span.rounded.bg-light.p-1.font-monospace remark
                        are optional. When
                        %span.rounded.bg-light.p-1.font-monospace seat
                        or
                        %span.rounded.bg-light.p-1.font-monospace remark
                        is empty (but not missing), the original value will be used.
                    .card-title
                      %h5 Example
                    %ul
                      %li.mb-2
                        .rounded.bg-light.p-1.font-monospace user1
                        will add the user with login "user1" to the contest. If the user already exists, no change is made to the contest user
                      %li.mb-2
                        .rounded.bg-light.p-1.font-monospace user1,room 403-8,
                        will add the user with login "user1" and and set the seating to "room 403" and set the remark to an empty string. If the user is already in the contest, the seat and remark fields updated.


:javascript
  function clear_user_form() {
    $('#user_group_id').val(null).trigger('change')
    $('#user_id').val(null).trigger('change')
  }

  function clear_problem_form() {
    $('#problem_group_id').val(null).trigger('change')
    $('#problem_id').val(null).trigger('change')
  }

  function start_stop_offset_render(data,type,row,meta) {
    return `${row['start_offset_second']} : ${row['extra_time_second']} <a href='#' data-row-id="${row['id']}" data-action="click->contest#showExtraTimeDialog"><span class="mi mi-bs md-18">edit</span></a>`
  }

  function role_action_button(data,type,row,meta) {
    result = ''
    if (row['role'] != 'editor') 
      result += cafe.dt.render.button('as editor',{element_type: 'link', className: 'link-success', action: 'contest#postUserAction', command: 'make_editor'})(row['user_id'],type,row,meta)
    if (row['role'] != 'user') {
      if (result != '') result += ' | '
      result += cafe.dt.render.button('as user',{element_type: 'link', className: 'link-info', action: 'contest#postUserAction', command: 'make_user'})(row['user_id'],type,row,meta)
    }
    return result

  }



  $(function() {
    //user table
    user_role_column = 2
    user_table_config = {
      responsive: true,
      processing: true,
      rowId: 'id',
      destroy: true,
      paging: false,
      order: [[0,'asc']],
      ajax: {
        url: "#{show_users_query_contest_path(@contest)}",
        type: 'POST',
        headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'), },
      },
      layout: {
        topStart: 'info',
        topEnd: 'search',
      },
      columns: [ 
        {data: 'login'},
        {data: 'full_name'},
        {data: 'role'},
        {data: 'remark'},
        {data: 'seat'},
        {data: null, render: start_stop_offset_render},
        {data: 'user_id', render: cafe.dt.render.button(null, {element_type: 'switch', action: 'contest#postUserAction', command: 'toggle', checked_data_field: 'enabled'})},
        {data: 'user_id', render: cafe.dt.render.button(`[${cafe.msi('person_remove','md-18')} Remove]`, {element_type: 'link', className: 'link-danger', action: 'contest#postUserAction', command: 'remove', confirm: 'Remove user from contest?'})},
        {data: 'user_id', render: role_action_button},
      ],
      columnDefs: [{visible: false, targets: user_role_column}, {orderable: false, targets: [5,6]} ],
      orderFixed: [user_role_column,'asc'],
      drawCallback: function (settings) {
        // we assume that the row are sorted by users' role (by 'orderFixed' and 'order' options)
        // this render a header rows when two adjacent rows has their roles differ
        var api = this.api();
        var rows = api.rows({ page: 'current' }).nodes();
        var last_role = null;
        api.column(user_role_column, { page: 'current' })
          .data()
          .each(function (role, i) {
              if (last_role !== role) {

                // set text for role row
                if (role == 'editor') {
                  role_text = '<tr class="table-success"><td colspan="8"> Editors (Can edit the contest) </td></tr>'
                } else {
                  role_text = '<tr class="table-info"><td colspan="8"> Users (Can only submit to the contest) </td></tr>'
                }

                //prepend row
                $(rows).eq(i).before(role_text);
                last_role = role;
              }
          });
        //since columns size changed, we call adjust
        //but not .draw() !!! else, infinite recursion
        api.columns.adjust()
      },
    }

    //problem table
    problem_table_config = {
      responsive: true,
      processing: true,
      rowId: 'id',
      destroy: true,
      paging: false,
      order: [[0,'asc']],
      ajax: {
        url: "#{show_problems_query_contest_path(@contest)}",
        type: 'POST',
        headers: { 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'), },
      },
      layout: {
        topStart: 'info',
        topEnd: 'search',
      },
      columns: [ 
        {data: 'number'},
        {data: 'name'},
        {data: 'full_name'},
        {data: 'available', render: cafe.dt.render.yes_no_pill(), className: 'text-center'},
        {data: 'problem_id', render: cafe.dt.render.button(null, {element_type: 'switch', action: 'contest#postProblemAction', command: 'toggle', checked_data_field: 'enabled'})},
        {data: 'problem_id', render: cafe.dt.render.button(`[${cafe.msi('delete','md-18')} Remove]`, {className: 'link-danger', action: 'contest#postProblemAction', command: 'remove', confirm: 'Remove problem from contest?', element_type: 'link'})},
        {data: 'problem_id', render: cafe.dt.render.button(`[${cafe.msi('arrow_upward','md-18')} Move Up]`, {action: 'contest#postProblemAction', command: 'moveup', element_type: 'link'})},
        {data: 'problem_id', render: cafe.dt.render.button(`[${cafe.msi('arrow_downward','md-18')} Move Down]`, {action: 'contest#postProblemAction', command: 'movedown', element_type: 'link'})},
      ],
      columnDefs: [{visible: false, targets: [0]},
                   {orderable: false, targets: [1,2,3,4,5,6,7]}],
      drawCallback: function (settings) {
        var api = this.api();
        api.columns.adjust()
      },
    }

    //initialize the table
    $('#user_table').DataTable(user_table_config)
    $('#problem_table').DataTable(problem_table_config)
  });
