%header
  %nav.navbar.fixed-top.navbar-dark.bg-primary.navbar-expand-lg.shadow-sm
    .container-fluid
      %a.navbar-brand{href: list_main_path}
        %span.mi.mi-bs home
        MAIN
      .navbar-expand
        / display MODE button (with countdown in contest mode)
        - if GraderConfiguration.analysis_mode?
          %div.btn.btn-success#countdown= "ANALYSIS MODE"
        - elsif GraderConfiguration.time_limit_mode?
          - if @current_contest&.contest_status == :ended
            %div.btn.btn-danger#countdown= "Contest is over"
          - elsif !@current_contest&.contest_status == :later
            %div.btn.btn-primary#countdown= (t 'title_bar.contest_not_started')
          - elsif @current_contest
            %div.btn.btn-dark#countdown
            :javascript
              $(() => {
                too_early_count = 0
                setInterval(updateRemainingTime,500)
                setTimeout(checkInLoop,1000)
              })
      %button.navbar-toggler{ type: :button, data: {bs: {toggle: 'collapse', target: '#navbar-collapse'}} }
        %span.navbar-toggler-icon
      .collapse.navbar-collapse#navbar-collapse
        %ul.navbar-nav.me-auto.mb-2.mb-lg-0
          / submission
          - if (@current_user!=nil) and (GraderConfiguration.show_tasks_to?(@current_user))
            %li.nav-item.dropdown.mx-2
              %a.nav-link.dropdown-toggle.active-with-children{href: '#', data: {'bs': {toggle:'dropdown'}},  aria: {expanded:"false"}, role: "button"}
                = "#{I18n.t 'menu.submissions'}"
              %ul.dropdown-menu
                %li= link_to 'View', submissions_path, class: 'dropdown-item '+active_class_when(controller: :submissions)
          / hall of fame
          - if GraderConfiguration['right.user_hall_of_fame']
            %li= link_to "#{I18n.t 'menu.hall_of_fame'}", problem_hof_report_path, class: 'nav-link mx-2'+active_class_when(controller: :report, action: :problem_hof)
          / admin section
          - if @current_user && (@current_user.admin? || @current_user.groups_for_action(:edit).any?)
            / management
            %li.nav-item.dropdown.mx-2
              %a.nav-link.dropdown-toggle.active-with-children{href: '#',
                data: {'bs': {toggle:'dropdown'}}, aria: {haspopup:"true", expanded:"false"}, role: "button"}
                Manage
              %ul.dropdown-menu
                %li= link_to 'Announcements', announcements_path, class: 'dropdown-item'+active_class_when(controller: :announcements)
                %li= link_to 'Problems', problems_path, class: 'dropdown-item'+active_class_when(controller: :problems)
                %li= link_to 'Tags', tags_path, class: 'dropdown-item'+active_class_when(controller: :tags)
                %li= link_to 'Users', user_admin_index_path, class: 'dropdown-item'+active_class_when(controller: :user_admin) if @current_user.admin?
                %li= link_to 'Groups', groups_path, class: 'dropdown-item'+active_class_when(controller: :groups)
                %li= link_to 'Graders', grader_processes_path, class: 'dropdown-item'+active_class_when(controller: :graders) if @current_user.admin?
                %li= link_to 'Message ', console_messages_path, class: 'dropdown-item'+active_class_when(controller: :messages) if @current_user.admin?
                - if @current_user.admin?
                  %li
                    %hr.dropdown-divider
                  %li= link_to 'System config', grader_configuration_index_path, class: 'dropdown-item'+active_class_when(controller: :grader_configuration)
                %li
                  %hr.dropdown-divider
                %li= link_to 'Sites', sites_path, class: 'dropdown-item'+active_class_when(controller: :sites) if @current_user.admin?
                %li= link_to 'Contests', contests_path, class: 'dropdown-item'+active_class_when(controller: :contest_management)
                -#
          / report
          - if @current_user && (@current_user.admin? || @current_user.groups_for_action(:report).any?)
            %li.nav-item.dropdown.mx-2
              %a.nav-link.dropdown-toggle.active-with-children{href: '#', data: {bs: {toggle:'dropdown'}},  aria: {haspopup:"true", expanded:"false"}, role: "button"}
                Report
              %ul.dropdown-menu
                %li= link_to 'Score Report', max_score_report_path, class: 'dropdown-item'+active_class_when(controller: :report, action: :max_score)
                %li= link_to 'Submission Report', submission_report_path, class: 'dropdown-item'+active_class_when(controller: :report, action: :submission)
                %li= link_to 'Login Report', login_report_path, class: 'dropdown-item'+active_class_when(controller: :report, action: :login)
            .d-flex
              =link_to "#{@backlog} backlogs!",
                grader_processes_path,
                class: 'navbar-btn btn btn-default btn-warning', data: {toggle: 'tooltip'},title: 'Number of ungraded submission'
              = form_with id: :view_sub_form, url: list_main_path, method: :get do |f|
                .input-group.mx-2
                  %input#view_sub_num.form-control{style: "width: 7rem", type: :text, placeholder: 'Submission #'}
                  %button#view_sub.btn.btn-secondary{type: :button, onclick: "go_to_sub();"} View

          / announcement
          - @nav_announcement.each do |ann|
            %p.navbar-text
              = ann.body.html_safe
        %ul.navbar-nav
          -#
            %li.nav-item
              %a.nav-link{href: help_main_path}
                %span.mi.mi-bs.md-18 help
            %li.nav-item
              %a.nav-link{href: messages_path}
                %span.mi.mi-bs.md-18 chat
          - if GraderConfiguration['system.user_setting_enabled']
            %li.nav-item
              %a.nav-link{href: profile_users_path, 'data-user-id': @current_user.id}
                %span.mi.mi-bs.md-18 settings
          %li.nav-item
            %a.nav-link{href: logout_main_path}
              %span.mi.mi-bs.md-18 exit_to_app
              = @current_user.full_name
:javascript
  let server_time_offset_ms = 0

  $(function() {
    $('.active-with-children').each( (index,obj) => { 
      if ($(obj).siblings('.dropdown-menu').has('.active').length > 0) { 
        $(obj).addClass('active')
      }
    } )

  });

  function go_to_sub() {
    sub_num = $('#view_sub_num').val();
    if (!isNaN(sub_num) && !isNaN(parseFloat(sub_num))) {
      window.location.href = "#{submission_path(-1234)}".replace('-1234',parseInt(sub_num))
    }
  }

  //make view sub form use go_to_sub()
  $("#view_sub_form").on('submit',function(e){
      e.preventDefault();
      go_to_sub();
  });

  // call check_in api and return a string of last check-in time
  function check_in() {
    fetch(check_in_url, {
      method: 'POST',
      headers: {
        'X-CSRF-Token': csrfToken  // Send CSRF token in the headers
      },
    }).then( response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text() // this is a promise
    });
  }

  function checkInLoop() {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content'); // Get the CSRF token
    const check_in_url = '#{user_check_in_contests_path}'
    const check_in_interval_seconds = #{Contest.check_in_interval}
    let response_received_time = moment()


    //call check in
    fetch(check_in_url, {
      method: 'POST',
      headers: {
        'X-CSRF-Token': csrfToken  // Send CSRF token in the headers
      },
    }).then( response => {
      response_received_time = moment()
      
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.text() // this is a promise
    }).then( response_text => {
      response = JSON.parse(response_text)
      ms_since_last_check_in = response.ms_since_last_check_in

      //recalculate time offset
      server_time_offset_ms = response_received_time - moment(response.current_time)


      if (ms_since_last_check_in > check_in_interval_seconds * 1000) {
        too_early_count = 0
      } else {
        too_early_count += 1
      }
      wait_multiplyer = (too_early_count + 1)
      randomMs = 500 + 2000 * Math.random()
      sleepDurationMs = wait_multiplyer * check_in_interval_seconds * 1000 + randomMs

      console.log(`Next check-in in ${sleepDurationMs / 1000} seconds...(collision = ${too_early_count})`);
      setTimeout(checkInLoop,sleepDurationMs)

    }).catch( e => {
      setTimeout(checkInLoop,5000)
      throw e
    }); // this catch is needed to handle the error happens in "then"
  }

  function updateRemainingTime() {
    const contestEndTime = Date.parse('#{@current_contest&.stop&.iso8601}')
    if (!contestEndTime) return; // No contest end time to display

    const now = (new Date())
    const remainingTime = contestEndTime - now + server_time_offset_ms

    if (remainingTime > 0) {
      const hours = Math.floor(remainingTime / (1000 * 60 * 60));
      const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

      document.getElementById('countdown').textContent =
        `${hours}h ${minutes}m ${seconds}s remaining`;
    } else {
      document.getElementById('countdown').textContent = 'Contest ended';
    }
  }

  // time should be a string in iso8601 format
  function humanize_time(time_iso8601,prepend_text_before = 'in ', prepend_text_after = '') {
    const time = Date.parse(time_iso8601)
    const now = new Date() ;
    const remainingTime = time - now + server_time_offset_ms;
    const hours = Math.floor(Math.abs(remainingTime) / (1000 * 60 * 60));
    const minutes = Math.floor((Math.abs(remainingTime) % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((Math.abs(remainingTime) % (1000 * 60)) / 1000);
    let time_text = ''
    
    //humanize
    if (hours == 0) {
      if (minutes <= 3) {
         time_text = `${minutes * 60 + seconds} seconds`
      } else {
        time_text = `${minutes} minutes`
      }
    } else {
      time_text = `${hours}h ${minutes}m`
    }

    //return the text
    if (remainingTime < 0) {
      return prepend_text_after + time_text + ' ago'
    } else {
      return prepend_text_before + time_text
    }
  }


