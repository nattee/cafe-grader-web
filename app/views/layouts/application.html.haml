<!DOCTYPE html>
%html
  %head
    %title= GraderConfiguration['contest.name']
    = stylesheet_link_tag "application", :media => "all"
    = stylesheet_link_tag "tempus-dominus/tempus-dominus", :media => "all"
    = stylesheet_link_tag "highlight/felipec.min"
    = stylesheet_link_tag "select2/select2.min", :media => "all"
    = stylesheet_link_tag "select2/select2-bootstrap-5-theme.min", :media => "all"
    = stylesheet_link_tag "datatables/datatables-new.min"
    = csrf_meta_tags
    = csp_meta_tag
    /= javasc  ript_include_tag :my_app # This is loaded via Sprocket, thus it is loaded first
    = javascript_importmap_tags
    -# %script{src: "https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"}
    = content_for :header
    = yield :head
    %meta{name: :viewport, content: "width=device-width, initial-scale=1"}

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    = render partial: 'layouts/js_route'

    /cdn
    /<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/felipec.min.css">
    /<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/panda-syntax-light.min.css">
    /<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/tokyo-night-light.min.css">
  %body{ 'data-controller': "initialize #{@stimulus_controller}" }
    - unless local_assigns[:skip_header]
      = render 'layouts/header'

    /= content_tag(:p,flash[:notice],class: 'alert alert-success') if flash[:notice]!=nil
    #main-content{class: (@container_fluid.nil? || @container_fluid) ? 'container-fluid' : 'container' }
      - flash.each do |msg_type, message|
        .alert.alert-dismissible.my-2.fade.show{class: bootstrap_class_for(msg_type)}
          = message
          %button.btn-close{type: 'button', 'data-bs-dismiss': :alert}
      = yield
    
    -# for msg modal, we have a turbo_frame, ready to be shown via turbo
      render partial: 'msg_modal_show', locals: {do_popup: true, header_msg: 'Adding users failed', body_msg: e.message}
    = turbo_frame_tag :msg_modal_main, data: {turbo: true}

    -# -- for adding toast --
      to respond with additional toast, use
      = turbo_stream.append 'toast-area', partial: 'toast', locals: {toast: @toast}
    = turbo_frame_tag :toast_main, data: {turbo: true} do
      #toast-area.toast-container.position-fixed.bottom-0.start-0.p-3
        / place holder

    -# -- for appending javascript response --
      to response with a javascript, use
      = turbo_stream.append 'js-response' do
        :javascript
          <your code here>
      Also, if the response is html, it can directly contain :javascript tag.
    = turbo_frame_tag :js_response, data: {turbo: true} do
      #js-response
        / place holder

  %footer.footer.mt-auto.py-2.bg-light.fixed-bottom.border-top
    .container.text-center
      %span.text-muted
        &copy; #{Time.now.year} cafe-grader | Revision: 4.1.0cu

